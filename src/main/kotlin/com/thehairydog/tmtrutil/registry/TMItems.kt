package com.thehairydog.tmtrutil.registry

import com.thehairydog.tmtrutil.item.TmItem
import com.thehairydog.tmtrutil.registry.ModItems.register

object TMItems {

    // List of all TM names (the ones you want to use in-game)
    private val tmNames = listOf(
        "tm_takedown",
        "tm_charm",
        "tm_faketears",
        "tm_agility",
        "tm_mudslap",
        "tm_scaryface",
        "tm_protect",
        "tm_firefang",
        "tm_thunderfang",
        "tm_icefang",
        "tm_waterpulse",
        "tm_lowkick",
        "tm_acidspray",
        "tm_acrobatics",
        "tm_strugglebug",
        "tm_psybeam",
        "tm_confuseray",
        "tm_thief",
        "tm_disarmingvoice",
        "tm_trailblaze",
        "tm_pounce",
        "tm_chillingwater",
        "tm_chargebeam",
        "tm_firespin",
        "tm_facade",
        "tm_poisontail",
        "tm_aerialace",
        "tm_bulldoze",
        "tm_hex",
        "tm_snarl",
        "tm_metalclaw",
        "tm_swift",
        "tm_magicalleaf",
        "tm_icywind",
        "tm_mudshot",
        "tm_rocktomb",
        "tm_drainingkiss",
        "tm_flamecharge",
        "tm_lowsweep",
        "tm_aircutter",
        "tm_storedpower",
        "tm_nightshade",
        "tm_fling",
        "tm_dragontail",
        "tm_venoshock",
        "tm_avalanche",
        "tm_endure",
        "tm_voltswitch",
        "tm_sunnyday",
        "tm_raindance",
        "tm_sandstorm",
        "tm_snowscape",
        "tm_smartstrike",
        "tm_psyshock",
        "tm_dig",
        "tm_bulletseed",
        "tm_falseswipe",
        "tm_brickbreak",
        "tm_zenheadbutt",
        "tm_uturn",
        "tm_shadowclaw",
        "tm_foulplay",
        "tm_psychicfangs",
        "tm_bulkup",
        "tm_airslash",
        "tm_bodyslam",
        "tm_firepunch",
        "tm_thunderpunch",
        "tm_icepunch",
        "tm_sleeptalk",
        "tm_seedbomb",
        "tm_electroball",
        "tm_drainpunch",
        "tm_reflect",
        "tm_lightscreen",
        "tm_rockblast",
        "tm_waterfall",
        "tm_dragonclaw",
        "tm_dazzlinggleam",
        "tm_metronome",
        "tm_grassknot",
        "tm_thunderwave",
        "tm_poisonjab",
        "tm_stompingtantrum",
        "tm_rest",
        "tm_rockslide",
        "tm_taunt",
        "tm_swordsdance",
        "tm_bodypress",
        "tm_spikes",
        "tm_toxicspikes",
        "tm_imprison",
        "tm_flashcannon",
        "tm_darkpulse",
        "tm_leechlife",
        "tm_eerieimpulse",
        "tm_fly",
        "tm_skillswap",
        "tm_ironhead",
        "tm_dragondance",
        "tm_powergem",
        "tm_gunkshot",
        "tm_substitute",
        "tm_irondefense",
        "tm_xscissor",
        "tm_drillrun",
        "tm_willowisp",
        "tm_crunch",
        "tm_trick",
        "tm_liquidation",
        "tm_gigadrain",
        "tm_aurasphere",
        "tm_tailwind",
        "tm_shadowball",
        "tm_dragonpulse",
        "tm_stealthrock",
        "tm_hypervoice",
        "tm_heatwave",
        "tm_energyball",
        "tm_psychic",
        "tm_heavyslam",
        "tm_encore",
        "tm_surf",
        "tm_icespinner",
        "tm_flamethrower",
        "tm_thunderbolt",
        "tm_playrough",
        "tm_amnesia",
        "tm_calmmind",
        "tm_helpinghand",
        "tm_pollenpuff",
        "tm_batonpass",
        "tm_earthpower",
        "tm_reversal",
        "tm_icebeam",
        "tm_electricterrain",
        "tm_grassyterrain",
        "tm_psychicterrain",
        "tm_mistyterrain",
        "tm_nastyplot",
        "tm_fireblast",
        "tm_hydropump",
        "tm_blizzard",
        "tm_firepledge",
        "tm_waterpledge",
        "tm_grasspledge",
        "tm_wildcharge",
        "tm_sludgebomb",
        "tm_earthquake",
        "tm_stoneedge",
        "tm_phantomforce",
        "tm_gigaimpact",
        "tm_blastburn",
        "tm_hydrocannon",
        "tm_frenzyplant",
        "tm_outrage",
        "tm_overheat",
        "tm_focusblast",
        "tm_leafstorm",
        "tm_hurricane"

    )

    // Dynamically create a property for each TM
    val items: Map<String, TmItem> = tmNames.associateWith { name ->
        register(name, TmItem(name)) as TmItem
    }

}
